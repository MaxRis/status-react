env.LANG="en_US.UTF-8"
env.LANGUAGE="en_US.UTF-8"
env.LC_ALL="en_US.UTF-8"

def installJSDeps() {
    def attempt = 1
    def maxAttempts = 10
    def installed = false
    sh 'node -v'
    sh 'npm -v'
    while (!installed && attempt <= maxAttempts) {
        println "#${attempt} attempt to install npm deps"
        sh 'npm install'
        installed = fileExists('node_modules/web3/index.js')
        attemp = attempt + 1
    }
}

timeout(90) {
  node ('macos1') {
    def apkUrl = ''
    def ipaUrl = ''
    def testPassed = true
    def branch;
    def scriptOutput = ''
    def packageFolder = './StatusImPackage'
    def scriptPath = ''

    load "$HOME/env.groovy"

    try {

      stage('Git & Dependencies') {
        //slackSend color: 'good', message: BRANCH_NAME + '(' + env.CHANGE_BRANCH + ') build started. ' + env.BUILD_URL

        scriptPath = sh ('pwd -P')
        sh ('echo ' + scriptPath)

        checkout scm
        sh 'git rebase origin/desktop'

        sh 'rm -rf node_modules'
        sh 'cp .env.jenkins .env'
        sh 'lein deps'

        installJSDeps()

        sh 'cd ./node_modules/react-native/react-native-cli && npm install -g && cd ../../../'
      }

      stage('Build ClojureScript') {
        sh 'rm -f index.desktop.js'
        // sh 'patch --verbose -d ./node_modules/metro/src -i ../../react-native/add-desktop-platform.patch'
        sh 'lein prod-build-desktop'

        sh ( 'rm -rf ' + packageFolder )
        sh ( 'mkdir ' + packageFolder )
        sh ( 'react-native bundle --entry-file index.desktop.js --bundle-output ' + packageFolder + '/StatusIm.jsbundle --dev false --platform desktop --assets-dest ' + packageFolder + '/assets' )
      }

      stage('Build MacOS binaries') {
        sh 'react-native build-desktop'
      }

      stage('Prepare and create MacOS Bundle') {
        sh ('cd ' + packageFolder + ' && ../scripts/download-mac-bundle-files.sh && unzip ./StatusIm.app.zip')
        sh ('cp -r ' + packageFolder + '/assets/share/assets ' + packageFolder +'/StatusIm.app/Contents/MacOs')
        sh ('cp ./desktop/bin/StatusIm ' + packageFolder +'/StatusIm.app/Contents/MacOs')

        sh ('$MACDEPLOYQT ' + packageFolder + '/StatusIm.app -verbose=3 -qmldir="' + scriptPath + '/node_modules/react-native/ReactQt/application/src/" -qmldir="' + scriptPath + '/node_modules/react-native/ReactQt/runtime/src/qml/" -dmg')
      }

    } catch (e) {
      //slackSend color: 'bad', message: BRANCH_NAME + ' failed to build. ' + env.BUILD_URL
      throw e
    }
  }
}
